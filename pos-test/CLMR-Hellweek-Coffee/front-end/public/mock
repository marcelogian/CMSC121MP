import React, { useState, useEffect } from 'react';
import Papa, { ParseResult } from 'papaparse';
// import LogoutIcon from '@mui/icons-material/Logout';
import { 
  Box, 
  Typography, 
  Button, 
  Tabs, 
  Tab, 
  Paper,  
  TextField, 
  FormControl, 
  InputLabel, 
  Select, 
  MenuItem,
  InputAdornment,
  // List, 
  // ListItem, 
  // ListItemText, 
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar,
  Alert,
  AppBar,
  Toolbar,
  Divider,
  Chip,
  Card,
  CardContent,
  CardActions,
  Avatar,
  // Badge,
  useTheme,
  styled
} from '@mui/material';
import { 
  Add, 
  Edit, 
  Delete, 
  Publish, 
  Logout,
  LocalCafe,
  Fastfood,
  ShoppingBag,
  AttachMoney,
  ExpandMore,
  ExpandLess
} from '@mui/icons-material';

// Styled components
const StyledCard = styled(Card)(({ theme }) => ({
  transition: 'transform 0.2s, box-shadow 0.2s',
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: theme.shadows[6],
  },
}));

const PriceChip = styled(Chip)(({ theme }) => ({
  marginLeft: theme.spacing(1),
  fontWeight: 'bold',
  backgroundColor: theme.palette.success.light,
  color: theme.palette.success.contrastText,
}));

const TypeIcon = ({ type }: { type: string }) => {
  switch (type) {
    case 'food': return <Fastfood color="secondary" />;
    case 'drink': return <LocalCafe color="primary" />;
    case 'merchandise': return <ShoppingBag color="action" />;
    default: return <LocalCafe />;
  }
};

interface Item {
  id: string;
  code: string;
  name: string;
  type: 'food' | 'drink' | 'merchandise';
  category: string;
  sizes: { name: string; price: number }[];
  customizations?: {
    name: string;
    options: { name: string; price: number }[];
  }[];
}

interface ManagerDashboardProps {
  handleLogout: () => void;
}

const ManagerDashboard: React.FC<ManagerDashboardProps> = ({ handleLogout }) => {
  const theme = useTheme();
  const [tabValue, setTabValue] = useState(0);
  const [items, setItems] = useState<Item[]>([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [currentItem, setCurrentItem] = useState<Item | null>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' | 'info' | 'warning' });
  const [file, setFile] = useState<File | null>(null);
  const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>({});

  // Form state remains the same
  const [formState, setFormState] = useState({
    name: '',
    type: 'drink' as 'food' | 'drink' | 'merchandise',
    category: '',
    sizes: [{ name: 'NS', price: 0 }],
    customizations: [] as { name: string; options: { name: string; price: number }[] }[]
  });

  // Toggle item expansion
  const toggleExpandItem = (id: string) => {
    setExpandedItems(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
  };

  const generateItemCode = (name: string, category: string): string => {
    const categoryPart = category.length >= 2
      ? `${category[0]}${category[category.length - 1]}`.toUpperCase()
      : 'XX';

    let namePart = name.substring(0, 4).toUpperCase();
    if (namePart.length < 4) {
      namePart = namePart.padEnd(4, 'X');
    }

    const itemsInCategory = items.filter(item => item.category.toLowerCase() === category.toLowerCase()).length;
    const numberPart = (itemsInCategory + 1).toString().padStart(3, '0');

    return `${categoryPart}-${namePart}-${numberPart}`;
  };

  const handleAddItem = () => {
    const newItem: Item = {
      id: Date.now().toString(),
      code: generateItemCode(formState.name, formState.category),
      ...formState
    };
    setItems([...items, newItem]);
    setSnackbar({ open: true, message: 'Item added successfully!', severity: 'success' });
    resetForm();
    setOpenDialog(false);
  };

  const handleUpdateItem = () => {
    if (!currentItem) return;
    const updatedItems = items.map(item => 
      item.id === currentItem.id ? { ...item, ...formState } : item
    );
    setItems(updatedItems);
    setSnackbar({ open: true, message: 'Item updated successfully!', severity: 'success' });
    resetForm();
    setOpenDialog(false);
  };

  const handleDeleteItem = (id: string) => {
    setItems(items.filter(item => item.id !== id));
    setSnackbar({ open: true, message: 'Item deleted successfully!', severity: 'success' });
  };

  const handleEditItem = (item: Item) => {
    setCurrentItem(item);
    setFormState({
      name: item.name,
      type: item.type,
      category: item.category,
      sizes: item.sizes,
      customizations: item.customizations || []
    });
    setOpenDialog(true);
  };

  const resetForm = () => {
    setFormState({
      name: '',
      type: 'drink',
      category: '',
      sizes: [{ name: 'NS', price: 0 }],
      customizations: []
    });
    setCurrentItem(null);
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0];
      setFile(selectedFile);

      if (selectedFile.name.endsWith('.csv')) {
        Papa.parse(selectedFile, {
          complete: (results: ParseResult<any>) => {
            const parsedItems = parseCSVData(results.data);
            if (parsedItems.length > 0) {
              setItems([...items, ...parsedItems]);
              setSnackbar({ open: true, message: `${parsedItems.length} items imported from CSV successfully!`, severity: 'success' });
            } else {
              setSnackbar({ open: true, message: 'No valid items found in the CSV file', severity: 'warning' });
            }
          },
          header: true,
          skipEmptyLines: true,
          error: (error: Error) => {
            setSnackbar({ open: true, message: `Error parsing CSV: ${error.message}`, severity: 'error' });
          }
        });
      } else if (selectedFile.name.endsWith('.json')) {
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const jsonData = JSON.parse(event.target?.result as string);
            const parsedItems = parseJSONData(jsonData);
            if (parsedItems.length > 0) {
              setItems([...items, ...parsedItems]);
              setSnackbar({ open: true, message: `${parsedItems.length} items imported from JSON successfully!`, severity: 'success' });
            } else {
              setSnackbar({ open: true, message: 'No valid items found in the JSON file', severity: 'warning' });
            }
          } catch (error) {
            setSnackbar({ open: true, message: `Error parsing JSON: ${(error as Error).message}`, severity: 'error' });
          }
        };
        reader.readAsText(selectedFile);
      } else {
        setSnackbar({ open: true, message: 'Unsupported file format. Please upload a CSV or JSON file.', severity: 'error' });
      }
    }
  };

  const parseCSVData = (data: any[]): Item[] => {
    const categoriesInCSV = new Set<string>();
    data.forEach(row => {
      if (row.category) {
        categoriesInCSV.add(row.category.toLowerCase());
      }
    });

    const categoryCounts = new Map<string, number>();
    
    items.forEach(item => {
      const key = item.category.toLowerCase();
      categoryCounts.set(key, (categoryCounts.get(key) || 0) + 1);
    });

    categoriesInCSV.forEach(category => {
      categoryCounts.set(category, categoryCounts.get(category) || 0);
    });

    return data
      .filter(row => row.name && row.type)
      .map((row) => {
        const category = row.category || '';
        const categoryKey = category.toLowerCase();
        
        const currentCount = categoryCounts.get(categoryKey) || 0;
        categoryCounts.set(categoryKey, currentCount + 1);

        let sizes = [{ name: 'NS', price: 0 }];
        try {
          if (row.sizes) {
            sizes = JSON.parse(row.sizes);
          } else if (row.size && row.price) {
            sizes = [{ name: row.size, price: parseFloat(row.price) || 0 }];
          }
        } catch (e) {
          console.error('Error parsing sizes', e);
        }

        let customizations = [];
        try {
          if (row.customizations) {
            customizations = JSON.parse(row.customizations);
          }
        } catch (e) {
          console.error('Error parsing customizations', e);
        }

        return {
          id: `imported-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`,
          code: row.code || generateItemCode(row.name, category),
          name: row.name,
          type: ['food', 'drink', 'merchandise'].includes(row.type.toLowerCase()) 
            ? row.type.toLowerCase() as 'food' | 'drink' | 'merchandise' 
            : 'drink',
          category: category,
          sizes,
          customizations
        };
      });
  };

  const parseJSONData = (data: any): Item[] => {
    if (!Array.isArray(data)) return [];

    const categoriesInJSON = new Set<string>();
    data.forEach(item => {
      if (item.category) {
        categoriesInJSON.add(item.category.toLowerCase());
      }
    });

    const categoryCounts = new Map<string, number>();
    
    items.forEach(item => {
      const key = item.category.toLowerCase();
      categoryCounts.set(key, (categoryCounts.get(key) || 0) + 1);
    });

    categoriesInJSON.forEach(category => {
      categoryCounts.set(category, categoryCounts.get(category) || 0);
    });

    return data
      .filter(item => item.name && item.type)
      .map((item) => {
        const category = item.category || '';
        const categoryKey = category.toLowerCase();
        
        const currentCount = categoryCounts.get(categoryKey) || 0;
        categoryCounts.set(categoryKey, currentCount + 1);

        return {
          id: item.id || `imported-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`,
          code: item.code || generateItemCode(item.name, category),
          name: item.name,
          type: ['food', 'drink', 'merchandise'].includes(item.type.toLowerCase()) 
            ? item.type.toLowerCase() as 'food' | 'drink' | 'merchandise' 
            : 'drink',
          category: category,
          sizes: item.sizes || [{ name: 'NS', price: 0 }],
          customizations: item.customizations || []
        };
      });
  };

  // ... (rest of the helper functions remain the same)
    const addSize = () => {
    setFormState({
      ...formState,
      sizes: [...formState.sizes, { name: '', price: 0 }]
    });
  };

  const updateSize = (index: number, field: 'name' | 'price', value: string | number) => {
    const newSizes = [...formState.sizes];
    newSizes[index][field] = value as never;
    setFormState({ ...formState, sizes: newSizes });
  };

  const removeSize = (index: number) => {
    const newSizes = formState.sizes.filter((_, i) => i !== index);
    setFormState({ ...formState, sizes: newSizes });
  };

  const addCustomization = () => {
    setFormState({
      ...formState,
      customizations: [...formState.customizations, { name: '', options: [] }]
    });
  };

  const updateCustomization = (index: number, field: 'name', value: string) => {
    const newCustomizations = [...formState.customizations];
    newCustomizations[index][field] = value;
    setFormState({ ...formState, customizations: newCustomizations });
  };

  const addOption = (customizationIndex: number) => {
    const newCustomizations = [...formState.customizations];
    newCustomizations[customizationIndex].options.push({ name: '', price: 0 });
    setFormState({ ...formState, customizations: newCustomizations });
  };

  const updateOption = (customizationIndex: number, optionIndex: number, field: 'name' | 'price', value: string | number) => {
    const newCustomizations = [...formState.customizations];
    newCustomizations[customizationIndex].options[optionIndex][field] = value as never;
    setFormState({ ...formState, customizations: newCustomizations });
  };

  const removeOption = (customizationIndex: number, optionIndex: number) => {
    const newCustomizations = [...formState.customizations];
    newCustomizations[customizationIndex].options = newCustomizations[customizationIndex].options.filter((_, i) => i !== optionIndex);
    setFormState({ ...formState, customizations: newCustomizations });
  };

  const removeCustomization = (index: number) => {
    const newCustomizations = formState.customizations.filter((_, i) => i !== index);
    setFormState({ ...formState, customizations: newCustomizations });
  };

  return (
    <Box sx={{ width: '100%', p: 3, pt: '64px', backgroundColor: theme.palette.background.default }}>
      <AppBar position="fixed" elevation={0} sx={{ background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)` }}>
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1, fontWeight: 600 }}>
            <Box component="span" sx={{ display: 'flex', alignItems: 'center' }}>
              <LocalCafe sx={{ mr: 1 }} />
              Hell Week Coffee - Manager Dashboard
            </Box>
          </Typography>
          <Button 
            color="inherit" 
            startIcon={<Logout />}
            onClick={handleLogout}
            sx={{
              '&:hover': {
                backgroundColor: 'rgba(255,255,255,0.1)'
              }
            }}
          >
            Logout
          </Button>
        </Toolbar>
      </AppBar>

      <Box sx={{ p: 3, maxWidth: 1200, margin: '0 auto' }}>
        <Tabs 
          value={tabValue} 
          onChange={(e, newValue) => setTabValue(newValue)}
          variant="fullWidth"
          sx={{
            mb: 3,
            '& .MuiTabs-indicator': {
              height: 4,
              borderRadius: 2
            }
          }}
        >
          <Tab 
            label="Items Management" 
            icon={<Edit fontSize="small" />} 
            iconPosition="start"
            sx={{ fontWeight: 600 }}
          />
          <Tab 
            label="Import Items" 
            icon={<Publish fontSize="small" />} 
            iconPosition="start"
            sx={{ fontWeight: 600 }}
          />
        </Tabs>

        {tabValue === 0 ? (
          <Box>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
              <Typography variant="h5" sx={{ fontWeight: 600 }}>
                Menu Items
                <Chip 
                  label={`${items.length} items`} 
                  size="small" 
                  color="primary" 
                  sx={{ ml: 1, fontWeight: 600 }} 
                  onClick={() => console.log('Item count clicked')}
                />
              </Typography>
              <Button 
                variant="contained" 
                startIcon={<Add />}
                onClick={() => {
                  resetForm();
                  setOpenDialog(true);
                }}
                sx={{
                  borderRadius: 2,
                  px: 3,
                  py: 1,
                  textTransform: 'none',
                  fontWeight: 600,
                  boxShadow: 'none',
                  '&:hover': {
                    boxShadow: 'none'
                  }
                }}
              >
                Add New Item
              </Button>
            </Box>

            {items.length === 0 ? (
              <Paper sx={{ p: 4, textAlign: 'center', backgroundColor: theme.palette.background.paper }}>
                <Typography variant="h6" color="textSecondary" sx={{ mb: 2 }}>
                  No items found
                </Typography>
                <Button 
                  variant="outlined" 
                  startIcon={<Add />}
                  onClick={() => setOpenDialog(true)}
                >
                  Create your first item
                </Button>
              </Paper>
            ) : (
              <Box sx={{ 
                display: 'flex', 
                flexWrap: 'wrap', 
                gap: '24px',
                '& > *': {
                  flex: '1 1 300px',
                  maxWidth: '100%'
                }
              }}>
                {items.map((item) => (
                  <StyledCard key={item.id}>
                    <CardContent>
                      <Box display="flex" alignItems="flex-start">
                        <Avatar sx={{ 
                          bgcolor: theme.palette.background.paper,
                          mr: 2,
                          mt: 1,
                          color: theme.palette.text.primary
                        }}>
                          <TypeIcon type={item.type} />
                        </Avatar>
                        <Box flexGrow={1}>
                          <Box display="flex" justifyContent="space-between">
                            <Typography variant="h6" sx={{ fontWeight: 600 }}>
                              {item.name}
                            </Typography>
                            <IconButton 
                              size="small" 
                              onClick={() => toggleExpandItem(item.id)}
                              sx={{ ml: 1 }}
                            >
                              {expandedItems[item.id] ? <ExpandLess /> : <ExpandMore />}
                            </IconButton>
                          </Box>
                          <Typography variant="body2" color="textSecondary">
                            {item.category}
                          </Typography>
                          <PriceChip 
                            label={item.code} 
                            size="small" 
                            variant="outlined" 
                            sx={{ mt: 1, fontSize: '0.7rem' }} 
                            onClick={() => console.log('Item count clicked')}
                          />
                        </Box>
                      </Box>

                      {expandedItems[item.id] && (
                        <Box sx={{ mt: 2 }}>
                          <Divider sx={{ my: 1 }} />
                          <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                            Sizes & Prices
                          </Typography>
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                            {item.sizes.map((size, index) => (
                              <PriceChip
                                key={index}
                                label={`${size.name}: ₱${size.price.toFixed(2)}`}
                                variant="outlined"
                                size="small"
                                onClick={() => console.log('Item count clicked')}
                              />
                            ))}
                          </Box>

                          {item.customizations && item.customizations.length > 0 && (
                            <>
                              <Divider sx={{ my: 2 }} />
                              <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                                Customizations
                              </Typography>
                              {item.customizations.map((custom, cIndex) => (
                                <Box key={cIndex} sx={{ mb: 1 }}>
                                  <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                    {custom.name}
                                  </Typography>
                                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, ml: 1 }}>
                                    {custom.options.map((option, oIndex) => (
                                      <PriceChip
                                        key={oIndex}
                                        label={`${option.name}${option.price > 0 ? ` (+₱${option.price.toFixed(2)})` : ''}`}
                                        size="small"
                                        sx={{ fontSize: '0.7rem' }}
                                        onClick={() => console.log('Item count clicked')}
                                      />
                                    ))}
                                  </Box>
                                </Box>
                              ))}
                            </>
                          )}
                        </Box>
                      )}
                    </CardContent>
                    <CardActions sx={{ justifyContent: 'flex-end', pt: 0 }}>
                      <IconButton 
                        color="primary" 
                        onClick={() => handleEditItem(item)}
                        size="small"
                      >
                        <Edit fontSize="small" />
                      </IconButton>
                      <IconButton 
                        color="error" 
                        onClick={() => handleDeleteItem(item.id)}
                        size="small"
                      >
                        <Delete fontSize="small" />
                      </IconButton>
                    </CardActions>
                  </StyledCard>
                ))}
              </Box>
            )}
          </Box>
        ) : (
          <Box sx={{ mt: 3 }}>
            <Paper sx={{ p: 3, backgroundColor: theme.palette.background.paper }}>
              <Typography variant="h5" sx={{ fontWeight: 600, mb: 2 }}>
                Import Items
              </Typography>
              <Typography variant="body1" color="textSecondary" sx={{ mb: 3 }}>
                Upload a CSV or JSON file to import multiple items at once. The file should include item details like name, type, category, and pricing.
              </Typography>
              
              <Box sx={{ 
                border: `2px dashed ${theme.palette.divider}`,
                borderRadius: 2,
                p: 4,
                textAlign: 'center',
                backgroundColor: theme.palette.action.hover
              }}>
                <Publish fontSize="large" color="action" sx={{ mb: 1 }} />
                <Typography variant="h6" sx={{ mb: 1 }}>
                  Drag and drop files here
                </Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  or
                </Typography>
                <input
                  accept=".json,.csv"
                  style={{ display: 'none' }}
                  id="upload-file"
                  type="file"
                  onChange={handleFileUpload}
                />
                <label htmlFor="upload-file">
                  <Button 
                    variant="contained" 
                    component="span"
                    startIcon={<Publish />}
                    sx={{
                      borderRadius: 2,
                      px: 3,
                      py: 1,
                      textTransform: 'none',
                      fontWeight: 600
                    }}
                  >
                    Select File
                  </Button>
                </label>
                {file && (
                  <Box sx={{ mt: 3 }}>
                    <PriceChip
                      label={file.name}
                      onDelete={() => setFile(null)}
                      sx={{ fontWeight: 500 }}
                      onClick={() => console.log('Item count clicked')}
                    />
                  </Box>
                )}
              </Box>

              <Box sx={{ mt: 3, p: 2, backgroundColor: theme.palette.background.default, borderRadius: 1 }}>
                <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1 }}>
                  File Requirements
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  • CSV/JSON format with UTF-8 encoding
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  • Required fields: name, type (food/drink/merchandise)
                </Typography>
                <Typography variant="body2">
                  • Optional fields: category, sizes, customizations
                </Typography>
              </Box>
            </Paper>
          </Box>
        )}

        {/* Add/Edit Item Dialog */}
        <Dialog 
          open={openDialog} 
          onClose={() => setOpenDialog(false)} 
          maxWidth="md" 
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 2
            }
          }}
        >
          <DialogTitle sx={{ 
            backgroundColor: theme.palette.primary.main, 
            color: theme.palette.primary.contrastText,
            fontWeight: 600
          }}>
            {currentItem ? 'Edit Item' : 'Add New Item'}
          </DialogTitle>
          <DialogContent sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>
              <Box sx={{ display: 'flex', gap: '24px', pt:'32px' }}>
                <Box sx={{ flex: 1 }}>
                  <TextField
                    fullWidth
                    label="Item Name"
                    value={formState.name}
                    onChange={(e) => setFormState({ ...formState, name: e.target.value })}
                    sx={{ mb: 2 }}
                    variant="outlined"
                    size="small"
                  />
                  <FormControl fullWidth sx={{ mb: 2 }} size="small">
                    <InputLabel>Item Type</InputLabel>
                    <Select
                      value={formState.type}
                      label="Item Type"
                      onChange={(e) => setFormState({ ...formState, type: e.target.value as any })}
                      variant="outlined"
                    >
                      <MenuItem value="drink">Drink</MenuItem>
                      <MenuItem value="food">Food</MenuItem>
                      <MenuItem value="merchandise">Merchandise</MenuItem>
                    </Select>
                  </FormControl>
                  <TextField
                    fullWidth
                    label="Category"
                    value={formState.category}
                    onChange={(e) => setFormState({ ...formState, category: e.target.value })}
                    sx={{ mb: 2 }}
                    variant="outlined"
                    size="small"
                  />
                </Box>
              </Box>
              
              <Box>
                <Typography variant="subtitle1" sx={{ 
                  fontWeight: 600, 
                  mb: 2,
                  display: 'flex',
                  alignItems: 'center'
                }}>
                  Sizes
                  <Chip label="Required for Drinks" size="small" color="primary" sx={{ ml: 1, fontSize: '0.7rem' }}
                    onClick={() => console.log('Item count clicked')}
                  />
                </Typography>
                
                {formState.sizes.map((size, index) => (
                  <Box key={index} display="flex" gap={2} sx={{ mb: 2 }} alignItems="center">
                    <TextField
                      label="Size Name"
                      value={size.name}
                      onChange={(e) => updateSize(index, 'name', e.target.value)}
                      size="small"
                      variant="outlined"
                      sx={{ flex: 1 }}
                    />
                    <TextField
                      label="Price"
                      type="number"
                      value={size.price}
                      onChange={(e) => updateSize(index, 'price', parseFloat(e.target.value))}
                      size="small"
                      variant="outlined"
                      sx={{ flex: 1 }}
                      InputProps={{
                        startAdornment: <InputAdornment position="start">₱</InputAdornment>
                      }}
                    />
                    <IconButton 
                      onClick={() => removeSize(index)}
                      color="error"
                      size="small"
                    >
                      <Delete fontSize="small" />
                    </IconButton>
                  </Box>
                ))}
                <Button 
                  variant="outlined" 
                  onClick={addSize}
                  sx={{ mb: 3 }}
                  size="small"
                  startIcon={<Add />}
                >
                  Add Size
                </Button>
              </Box>

              <Box>
                <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
                  Customizations
                </Typography>
                
                {formState.customizations.length === 0 ? (
                  <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                    No customizations added
                  </Typography>
                ) : (
                  formState.customizations.map((customization, cIndex) => (
                    <Paper key={cIndex} sx={{ mb: 3, p: 2, borderRadius: 1 }}>
                      <Box display="flex" alignItems="center" gap={2} sx={{ mb: 2 }}>
                        <TextField
                          label="Customization Name"
                          value={customization.name}
                          onChange={(e) => updateCustomization(cIndex, 'name', e.target.value)}
                          fullWidth
                          size="small"
                          variant="outlined"
                        />
                        <IconButton 
                          onClick={() => removeCustomization(cIndex)}
                          color="error"
                          size="small"
                        >
                          <Delete fontSize="small" />
                        </IconButton>
                      </Box>

                      <Typography variant="subtitle2" sx={{ fontWeight: 500, mb: 1 }}>
                        Options
                      </Typography>
                      
                      {customization.options.map((option, oIndex) => (
                        <Box key={oIndex} display="flex" gap={2} sx={{ mb: 1 }} alignItems="center">
                          <TextField
                            label="Option Name"
                            value={option.name}
                            onChange={(e) => updateOption(cIndex, oIndex, 'name', e.target.value)}
                            size="small"
                            variant="outlined"
                            sx={{ flex: 2 }}
                          />
                          <TextField
                            label="Price"
                            type="number"
                            value={option.price}
                            onChange={(e) => updateOption(cIndex, oIndex, 'price', parseFloat(e.target.value))}
                            size="small"
                            variant="outlined"
                            sx={{ flex: 1 }}
                            InputProps={{
                              startAdornment: <InputAdornment position="start">₱</InputAdornment>
                            }}
                          />
                          <IconButton 
                            onClick={() => removeOption(cIndex, oIndex)}
                            color="error"
                            size="small"
                          >
                            <Delete fontSize="small" />
                          </IconButton>
                        </Box>
                      ))}
                      
                      <Button 
                        variant="outlined" 
                        onClick={() => addOption(cIndex)}
                        sx={{ mt: 1 }}
                        disabled={customization.options.length >= 5}
                        size="small"
                        startIcon={<Add />}
                      >
                        Add Option {customization.options.length >= 5 && '(Max 5)'}
                      </Button>
                    </Paper>
                  ))
                )}
                
                <Button 
                  variant="outlined" 
                  onClick={addCustomization}
                  sx={{ mb: 2 }}
                  size="small"
                  startIcon={<Add />}
                >
                  Add Customization
                </Button>
              </Box>
            </Box>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button 
              onClick={() => setOpenDialog(false)}
              sx={{ borderRadius: 1 }}
            >
              Cancel
            </Button>
            <Button 
              onClick={currentItem ? handleUpdateItem : handleAddItem}
              variant="contained"
              disabled={!formState.name || !formState.category}
              sx={{ borderRadius: 1 }}
            >
              {currentItem ? 'Update Item' : 'Add Item'}
            </Button>
          </DialogActions>
        </Dialog>

        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert 
            onClose={() => setSnackbar({ ...snackbar, open: false })}
            severity={snackbar.severity}
            sx={{ 
              width: '100%',
              boxShadow: theme.shadows[3],
              borderRadius: 1
            }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
};

export default ManagerDashboard;